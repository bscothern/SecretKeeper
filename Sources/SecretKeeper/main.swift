//
// main.swift
// SecretKeeper
//
// Created by Braden Scothern on 11/13/19.
// Copyright Â© 2019 Braden Scothern. All rights reserved.
//

import Foundation

private class Main {
    func run() {
        var outputSourceCode = """
        //
        // GENERATED BY SecretKeeper
        //

        //swiftlint:disable all
        enum Secrets {

        """

        func makeHexString(from bytes: [UInt8]) -> String {
            bytes.lazy
                .map { String(format: "0x%02x", $0) }
                .reduce(into: "") { result, number in
                    if !result.isEmpty {
                        result += ", "
                    }
                    result += number
                }
        }

        Options.shared.secretsToObfuscate
            .sorted { $0.key < $1.key }
            .forEach { name, secret in
                var secret = secret
                let salt: [UInt8] = (0..<64).map { _ in UInt8.random(in: UInt8.min...UInt8.max) }
                let saltString = makeHexString(from: salt)
                let encoded: [UInt8] = secret.withUTF8 { bytes in
                    bytes.enumerated().map { offset, byte in
                        byte ^ salt[offset % salt.count]
                    }
                }
                let encodedString = makeHexString(from: encoded)
                outputSourceCode += """
                    private static let \(name)Salt: [UInt8] = [\(saltString)]

                    static var \(name): String {
                        let encoded: [UInt8] = [\(encodedString)]
                        return decode(encoded, cipher: \(name)Salt)
                    }

                """
                outputSourceCode += "\n"
            }

        outputSourceCode += """
            private static func decode(_ encoded: [UInt8], cipher: [UInt8]) -> String {
                String(decoding: encoded.enumerated().map { offset, element in
                    element ^ cipher[offset % cipher.count]
                }, as: UTF8.self)
            }
        }
        //swiftlint:enable all

        """

        do {
            try outputSourceCode.write(toFile: Options.shared.outputPath, atomically: true, encoding: .utf8)
        } catch {
            print(error)
            exit(1)
        }
    }
}

Main().run()
